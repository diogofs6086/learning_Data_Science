View(df)
# ID column insertion
df$ID <- c(1:dim(df)[1])
# School IDs
GP_school <- df$ID[df$school == 'GP']
MS_school <- df$ID[df$school == 'MS']
# 70% of training observations
# 30% of test observations
# GP school
GP_school_test <- sample(GP_school, round(length(GP_school)*0.30))
GP_school_test <- df[df$ID %in% GP_school_test, ]
GP_school_test
GP_school_train <- GP_school[!(GP_school) %in% GP_school_test$ID]
GP_school_train <- df[df$ID %in% GP_school_train, ]
GP_school_train
# Checking if the number of rows of training and test data are equal to the total
(nrow(GP_school_test) + nrow(GP_school_train)) == length(GP_school)
# MS school
MS_school_test <- sample(MS_school, round(length(MS_school)*0.30))
MS_school_test <- df[df$ID %in% MS_school_test, ]
MS_school_test
MS_school_train <- MS_school[!(MS_school) %in% MS_school_test$ID]
MS_school_train <- df[df$ID %in% MS_school_train, ]
MS_school_train
# Checking if the number of rows of training and test data are equal to the total
(nrow(MS_school_test) + nrow(MS_school_train)) == length(MS_school)
# Concatenating the training data sets of the schools
data_train <- rbind(GP_school_train, MS_school_train)
data_train <- data_train[ , colnames(df) != 'ID']
dim(data_train)
# Concatenating the test data sets of the schools
data_test <- rbind(GP_school_test, MS_school_test)
data_test <- data_test[ , colnames(df) != 'ID']
dim(data_test)
### Making classes of grades, as in the reference of the data set site entitled
### "Cortes, P., Silva, A. USING DATA MINING TO PREDICT SECONDARY SCHOOL STUDENT
###  PERFORMANC. University of Minho. Portugal"
grade_classes <- function(x) {
if (x > 15) {x = "A"}
else if (x < 10) {x = "F"}
else if (x == 14 | x == 15) {x = "B"}
else if (x == 12 | x == 13) {x = "C"}
else {x = "D"}
}
data_train$G3 <- sapply(data_train$G3, grade_classes)
data_train$G3 <- as.factor(data_train$G3)
str(data_train$G3)
View(data_train)
data_test$G3 <- sapply(data_test$G3, grade_classes)
data_test$G3 <- as.factor(data_test$G3)
str(data_test$G3)
View(data_test)
data_train_labels <- as.factor(data_train$G3)
data_train_labels
data_test_labels <- as.factor(data_test$G3)
data_test_labels
# The KNN algorithm does not except string or factor type
# Selecting the numeric columns
str(data_train)
data_train_num <- select_if(data_train, is.numeric)
head(data_train_num)
data_test_num <- select_if(data_test, is.numeric)
head(data_test_num)
# Model 1 - KNN model, where the target variable depends on all the numeric
#           variables
model_1 <- knn(train = data_train_num,
test = data_test_num,
cl = data_train_labels,
k = 3)
model_1
# Summary
summary(model_1)
# Confusion Matrix
confusionMatrix(data_test$G3, model_1)
# Other Confusion Matrix
CrossTable(x = data_test_labels, y = model_1, prop.chisq = FALSE)
model_2 <- knn(train = data_train_num[c('absences', 'failures', 'famrel',
'Medu', 'studytime', 'G2')],
test = data_test_num[c('absences', 'failures', 'famrel',
'Medu', 'studytime', 'G2')],
cl = data_train_labels,
k = 10)
model_2
# Summary
summary(model_2)
# Confusion Matrix
confusionMatrix(data_test$G3, model_2)
# Confusion Matrix
confusionMatrix(data_train$G3, model_2)
# Confusion Matrix
confusionMatrix(data_train$G3, model_2)
# Confusion Matrix
confusionMatrix(data_test$G3, model_2)
# Confusion Matrix
confusionMatrix(data_test_num$G3, model_2)
# Confusion Matrix
confusionMatrix(data_test_num$G3, model_2)
# Confusion Matrix
confusionMatrix(data_test$G3, model_2)
# Confusion Matrix
confusionMatrix(data_traint$G3, model_2)
# Confusion Matrix
confusionMatrix(data_train$G3, model_2)
# Confusion Matrix
confusionMatrix(data_test$G3, model_2)
## Salving the train and test data set to work on the next step
write.csv2(x = data_train, file = 'students_data_train.csv')
write.csv2(x = data_test, file = 'students_data_test.csv')
setwd("~/Documents/learning_Data_Science/R_scripts")
getwd()
# Problem: Predict student final grades (G3)
# Data set site: https://archive.ics.uci.edu/ml/datasets/Student+Performance
# Method: Support Vector Machines
# Packages
library(e1071)
?svm
# Read data set
data_train <- read.csv2('students_data_train.csv', stringsAsFactors = T)
data_train <- data_train[-1]
data_test <- read.csv2('students_data_test.csv', stringsAsFactors = T)
data_test <- data_test[-1]
str(data_train)
str(data_test)
# Model 1 - KNN model, where the target variable depends on all the numeric
#           variables
model_1 <- svm(G3 ~ .,
data = data_train,
type = 'C-classification',
kernel = 'radial')
model_1
# Summary
summary(model_1)
# Confusion Matrix
confusionMatrix(data_test$G3, model_1)
# Other Confusion Matrix
CrossTable(x = data_test_labels, y = model_1, prop.chisq = FALSE)
# Other Confusion Matrix
CrossTable(x = data_test, y = model_1, prop.chisq = FALSE)
# Other Confusion Matrix
CrossTable(x = data_test$G3, y = model_1, prop.chisq = FALSE)
# Previsões nos dados de treino
pred_train <- predict(model_1, data_train)
pred_train
# Percentual de previsões corretas com dataset de treino
mean(pred_train == data_train$G3)
# Previsões nos dados de teste
pred_test <- predict(model_1, data_test)
# Percentual de previsões corretas com dataset de teste
mean(pred_test == data_test$G3)
library(caret)
# Confusion Matrix
table(pred_test, data_test$G3)
# Confusion Matrix
confusionMatrix(data_test$G3, model_1)
# Confusion Matrix
confusionMatrix(data_train$G3, model_1)
# Confusion Matrix
table(pred_test, data_test$G3)
table(pred_train, data_train$G3)
# Summary
summary(model_1)
# Summary
summary(pred_test)
pred_train
# Confusion Matrix
table(pred_train, data_train$G3)
# Previsões nos dados de teste
pred_test <- predict(model_1, data_test)
# Percentual de previsões corretas com dataset de teste
mean(pred_test == data_test$G3)
model_2 <- svm(G3 ~ absences + failures + famrel + Medu + studytime + G2,
data = data_train,
type = 'C-classification',
kernel = 'radial')
model_2
# Previsões nos dados de treino
pred_train <- predict(model_2, data_train)
# Percentual de previsões corretas com dataset de treino
mean(pred_train == data_train$G3)
# Confusion Matrix
table(pred_train, data_train$G3)
# Previsões nos dados de teste
pred_test <- predict(model_2, data_test)
# Percentual de previsões corretas com dataset de teste
mean(pred_test == data_test$G3)
# Confusion Matrix
table(pred_test, data_test$G3)
model_2 <- svm(G3 ~ (absences + failures) * (famrel + Medu) * (studytime + G2),
data = data_train,
type = 'C-classification',
kernel = 'radial')
model_2
# Train data set prediction
pred_train <- predict(model_2, data_train)
# Correct prediction percentage
mean(pred_train == data_train$G3)
# Confusion Matrix
table(pred_train, data_train$G3)
# Test data set prediction
pred_test <- predict(model_2, data_test)
# Correct prediction percentage
mean(pred_test == data_test$G3)
# Confusion Matrix
table(pred_test, data_test$G3)
# Packages
library(rpart)
?rpart
setwd("~/Documents/learning_Data_Science/R_scripts")
getwd()
# Packages
library(rpart)
?rpart
# Read data set
data_train <- read.csv2('students_data_train.csv', stringsAsFactors = T)
data_train <- data_train[-1]
data_test <- read.csv2('students_data_test.csv', stringsAsFactors = T)
data_test <- data_test[-1]
str(data_train)
str(data_test)
# The KNN algorithm does not except string or factor type
# Selecting the numeric columns
str(data_train)
# Model 1 - SVM model, where the target variable depends on all variables
model_1 <- rpart(G3 ~ .,
data = data_train,
control = rpart.control(cp = 0.0005))
# Previsões nos dados de teste
tree_pred <- predict(model_1, data_set, type = 'class')
# Previsões nos dados de teste
tree_pred <- predict(model_1, data_test, type = 'class')
# Percentual de previsões corretas com dataset de teste
mean(tree_pred == data_test$G3)
# Confusion Matrix
table(tree_pred, data_test$G3)
# Percentual de previsões corretas com dataset de teste
mean(tree_pred == data_test$G3)
# Model 1 - SVM model, where the target variable depends on all variables
model_1 <- rpart(G3 ~ .,
data = data_train,
control = rpart.control(cp = 0.5))
# Previsões nos dados de teste
tree_pred <- predict(model_1, data_test, type = 'class')
# Percentual de previsões corretas com dataset de teste
mean(tree_pred == data_test$G3)
# Model 1 - SVM model, where the target variable depends on all variables
model_1 <- rpart(G3 ~ .,
data = data_train,
control = rpart.control(cp = 0.05))
# Previsões nos dados de teste
tree_pred <- predict(model_1, data_test, type = 'class')
# Percentual de previsões corretas com dataset de teste
mean(tree_pred == data_test$G3)
# Model 1 - SVM model, where the target variable depends on all variables
model_1 <- rpart(G3 ~ .,
data = data_train,
control = rpart.control(cp = 0.005))
# Previsões nos dados de teste
tree_pred <- predict(model_1, data_test, type = 'class')
# Percentual de previsões corretas com dataset de teste
mean(tree_pred == data_test$G3)
# Model 1 - SVM model, where the target variable depends on all variables
model_1 <- rpart(G3 ~ .,
data = data_train,
control = rpart.control(cp = 0.01))
# Previsões nos dados de teste
tree_pred <- predict(model_1, data_test, type = 'class')
# Percentual de previsões corretas com dataset de teste
mean(tree_pred == data_test$G3)
# Model 1 - SVM model, where the target variable depends on all variables
model_1 <- rpart(G3 ~ .,
data = data_train,
control = rpart.control(cp = 0.05))
# Previsões nos dados de teste
tree_pred <- predict(model_1, data_test, type = 'class')
# Percentual de previsões corretas com dataset de teste
mean(tree_pred == data_test$G3)
# Model 1 - SVM model, where the target variable depends on all variables
model_1 <- rpart(G3 ~ .,
data = data_train,
control = rpart.control(cp = 0.02))
# Previsões nos dados de teste
tree_pred <- predict(model_1, data_test, type = 'class')
# Percentual de previsões corretas com dataset de teste
mean(tree_pred == data_test$G3)
# Model 1 - SVM model, where the target variable depends on all variables
model_1 <- rpart(G3 ~ .,
data = data_train,
control = rpart.control(cp = 0.03))
# Previsões nos dados de teste
tree_pred <- predict(model_1, data_test, type = 'class')
# Percentual de previsões corretas com dataset de teste
mean(tree_pred == data_test$G3)
# Confusion Matrix
table(tree_pred, data_test$G3)
# Model 1 - SVM model, where the target variable depends on all variables
model_1 <- rpart(G3 ~ .,
data = data_train,
control = rpart.control(cp = 0.01))
# Previsões nos dados de teste
tree_pred <- predict(model_1, data_test, type = 'class')
# Percentual de previsões corretas com dataset de teste
mean(tree_pred == data_test$G3)
# Confusion Matrix
table(tree_pred, data_test$G3)
# Model 1 - SVM model, where the target variable depends on all variables
model_1 <- rpart(G3 ~ .,
data = data_train,
control = rpart.control(cp = 0.005))
# Previsões nos dados de teste
tree_pred <- predict(model_1, data_test, type = 'class')
# Percentual de previsões corretas com dataset de teste
mean(tree_pred == data_test$G3)
# Confusion Matrix
table(tree_pred, data_test$G3)
# Model 1 - SVM model, where the target variable depends on all variables
model_1 <- rpart(G3 ~ .,
data = data_train,
control = rpart.control(cp = 0.01))
# Previsões nos dados de teste
tree_pred <- predict(model_1, data_test, type = 'class')
# Percentual de previsões corretas com dataset de teste
mean(tree_pred == data_test$G3)
# Confusion Matrix
table(tree_pred, data_test$G3)
library(caret)
# Confusion Matrix
confusionMatrix(data_test$G3, model_2)
# Confusion Matrix
confusionMatrix(data_test$G3, model_1)
model_2 <- rpart(G3 ~ absences + failures + famrel + Medu + studytime + G2,
data = data_train,
control = rpart.control(cp = 0.01))
# Test data set predictions
tree_pred <- predict(model_2, data_test, type = 'class')
# Correct prediction percentage
mean(tree_pred == data_test$G3)
# Confusion Matrix
table(tree_pred, data_test$G3)
model_2 <- rpart(G3 ~ absences + failures + famrel + Medu + studytime + G2,
data = data_train,
control = rpart.control(cp = 0.001))
# Test data set predictions
tree_pred <- predict(model_2, data_test, type = 'class')
# Correct prediction percentage
mean(tree_pred == data_test$G3)
# Test data set predictions
tree_pred <- predict(model_1, data_test, type = 'class')
# Correct prediction percentage
mean(tree_pred == data_test$G3)
model_1 <- rpart(G3 ~ .,
data = data_train,
control = rpart.control(cp = 0.01))
# Test data set predictions
tree_pred_1 <- predict(model_1, data_test, type = 'class')
# Correct prediction percentage
mean(tree_pred_1 == data_test$G3)
# Confusion Matrix
table(tree_pred_1, data_test$G3)
model_2 <- rpart(G3 ~ absences + failures + famrel + Medu + studytime + G2,
data = data_train,
control = rpart.control(cp = 0.01))
# Test data set predictions
tree_pred_2 <- predict(model_2, data_test, type = 'class')
# Correct prediction percentage
mean(tree_pred_2 == data_test$G3)
# Confusion Matrix
table(tree_pred_2, data_test$G3)
model_2 <- rpart(G3 ~ (absences + failures) * (famrel + Medu) * (studytime + G2),
data = data_train,
control = rpart.control(cp = 0.01))
model_2 <- rpart(G3 ~ absences + failures + famrel + Medu + studytime + G2,
data = data_train,
control = rpart.control(cp = 0.01))
model_2 <- rpart(G3 ~ absences * failures + famrel + Medu + studytime + G2,
data = data_train,
control = rpart.control(cp = 0.01))
model_2 <- rpart(G3 ~ absences + failures + famrel + Medu + studytime + G2,
data = data_train,
control = rpart.control(cp = 0.01))
model_2
model_2 <- rpart(G3 ~ absences + famrel + Medu + G2,
data = data_train,
control = rpart.control(cp = 0.01))
model_2
# Test data set predictions
tree_pred_2 <- predict(model_2, data_test, type = 'class')
# Correct prediction percentage
mean(tree_pred_2 == data_test$G3)
# Confusion Matrix
table(tree_pred_2, data_test$G3)
model_2 <- rpart(G3 ~ G2,
data = data_train,
control = rpart.control(cp = 0.01))
model_2
# Test data set predictions
tree_pred_2 <- predict(model_2, data_test, type = 'class')
# Correct prediction percentage
mean(tree_pred_2 == data_test$G3)
model_1 <- rpart(G3 ~ .,
data = data_train,
control = rpart.control(cp = 0.01))
# Test data set predictions
tree_pred_1 <- predict(model_1, data_test, type = 'class')
# Correct prediction percentage
mean(tree_pred_1 == data_test$G3)
model_2 <- rpart(G3 ~ absences + failures + famrel + Medu + studytime + G2,
data = data_train,
control = rpart.control(cp = 0.01))
model_2
# Test data set predictions
tree_pred_2 <- predict(model_2, data_test, type = 'class')
# Correct prediction percentage
mean(tree_pred_2 == data_test$G3)
# Confusion Matrix
table(tree_pred_2, data_test$G3)
data_train <- data_train %>%
mutate(absences2 = ifelse (absences > 0, 1, 0))
data_test <- data_test %>%
mutate(absences2 = ifelse (absences > 0, 1, 0))
data_train <- data_train %>%
mutate(failures2 = ifelse (failures > 0, 1, 0))
data_test <- data_test %>%
mutate(failures2 = ifelse (failures > 0, 1, 0))
data_train$famrel2 <- data_train$famrel^0.01
data_test$famrel2 <- data_test$famrel^0.01
data_train$G22 <- data_train$G2^1.2
data_test$G22 <- data_test$G2^1.2
model_2 <- rpart(G3 ~ absences2 + failures2 + famrel2 + Medu + studytime + G22,
data = data_train,
control = rpart.control(cp = 0.01))
# Test data set predictions
tree_pred_2 <- predict(model_2, data_test, type = 'class')
# Correct prediction percentage
mean(tree_pred_2 == data_test$G3)
model_2 <- rpart(G3 ~ G2,
data = data_train,
control = rpart.control(cp = 0.01))
# Test data set predictions
tree_pred_2 <- predict(model_2, data_test, type = 'class')
# Correct prediction percentage
mean(tree_pred_2 == data_test$G3)
model_2 <- rpart(G3 ~ G22,
data = data_train,
control = rpart.control(cp = 0.01))
model_2 <- rpart(G3 ~ G22,
data = data_train,
control = rpart.control(cp = 0.01))
# Test data set predictions
tree_pred_2 <- predict(model_2, data_test, type = 'class')
# Correct prediction percentage
mean(tree_pred_2 == data_test$G3)
model_2 <- rpart(G3 ~ G2,
data = data_train,
control = rpart.control(cp = 0.01))
# Correct prediction percentage
mean(tree_pred_2 == data_test$G3)
model_2 <- rpart(G3 ~ G2 + famrel,
data = data_train,
control = rpart.control(cp = 0.01))
# Test data set predictions
tree_pred_2 <- predict(model_2, data_test, type = 'class')
# Correct prediction percentage
mean(tree_pred_2 == data_test$G3)
model_2 <- rpart(G3 ~ G2 + G1,
data = data_train,
control = rpart.control(cp = 0.01))
# Test data set predictions
tree_pred_2 <- predict(model_2, data_test, type = 'class')
# Correct prediction percentage
mean(tree_pred_2 == data_test$G3)
model_2 <- rpart(G3 ~ G2 + Fedu,
data = data_train,
control = rpart.control(cp = 0.01))
# Test data set predictions
tree_pred_2 <- predict(model_2, data_test, type = 'class')
# Correct prediction percentage
mean(tree_pred_2 == data_test$G3)
model_2 <- rpart(G3 ~ G2 + Medu,
data = data_train,
control = rpart.control(cp = 0.01))
# Test data set predictions
tree_pred_2 <- predict(model_2, data_test, type = 'class')
# Correct prediction percentage
mean(tree_pred_2 == data_test$G3)
model_2 <- rpart(G3 ~ G2 + failures,
data = data_train,
control = rpart.control(cp = 0.01))
# Test data set predictions
tree_pred_2 <- predict(model_2, data_test, type = 'class')
# Correct prediction percentage
mean(tree_pred_2 == data_test$G3)
model_2 <- rpart(G3 ~ G2 + sttudytime,
data = data_train,
control = rpart.control(cp = 0.01))
model_2 <- rpart(G3 ~ G2 + studytime,
data = data_train,
control = rpart.control(cp = 0.01))
# Test data set predictions
tree_pred_2 <- predict(model_2, data_test, type = 'class')
# Correct prediction percentage
mean(tree_pred_2 == data_test$G3)
model_2 <- rpart(G3 ~ G2 + abscences,
data = data_train,
control = rpart.control(cp = 0.01))
model_2 <- rpart(G3 ~ G2 + absences,
data = data_train,
control = rpart.control(cp = 0.01))
# Test data set predictions
tree_pred_2 <- predict(model_2, data_test, type = 'class')
# Correct prediction percentage
mean(tree_pred_2 == data_test$G3)
?rpart
